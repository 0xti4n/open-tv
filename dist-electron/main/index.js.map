{"version":3,"file":"index.js","sources":["../../electron/main/index.ts"],"sourcesContent":["import { app, BrowserWindow, shell, ipcMain, dialog } from 'electron'\nimport { release } from 'node:os'\nimport { join } from 'node:path'\nimport { createReadStream, existsSync} from 'node:fs'\nimport { readFile, open, writeFile, mkdir } from 'node:fs/promises'\nimport * as readLine from 'node:readline'\nimport { Channel } from '../../shared/dist/channel'\n// The built directory structure\n//\n// ├─┬ dist-electron\n// │ ├─┬ main\n// │ │ └── index.js    > Electron-Main\n// │ └─┬ preload\n// │   └── index.js    > Preload-Scripts\n// ├─┬ dist\n// │ └── index.html    > Electron-Renderer\n//\nprocess.env.DIST_ELECTRON = join(__dirname, '..')\nprocess.env.DIST = join(process.env.DIST_ELECTRON, '../dist')\nprocess.env.PUBLIC = process.env.VITE_DEV_SERVER_URL\n  ? join(process.env.DIST_ELECTRON, '../public')\n  : process.env.DIST\n\n// Disable GPU Acceleration for Windows 7\nif (release().startsWith('6.1')) app.disableHardwareAcceleration()\n\n// Set application name for Windows 10+ notifications\nif (process.platform === 'win32') app.setAppUserModelId(app.getName())\n\nif (!app.requestSingleInstanceLock()) {\n  app.quit()\n  process.exit(0)\n}\n\n// Remove electron security warnings\n// This warning only shows in development mode\n// Read more on https://www.electronjs.org/docs/latest/tutorial/security\n// process.env['ELECTRON_DISABLE_SECURITY_WARNINGS'] = 'true'\n\nlet win: BrowserWindow | null = null\n// Here, you can also use other preload\nconst preload = join(__dirname, '../preload/index.js')\nconst url = process.env.VITE_DEV_SERVER_URL\nconst indexHtml = join(process.env.DIST, 'index.html')\n\nasync function createWindow() {\n  win = new BrowserWindow({\n    title: 'Open-TV (made by Frédéric Lachapelle)',\n    icon: join(process.env.PUBLIC, 'favicon.ico'),\n    webPreferences: {\n      preload,\n      // Warning: Enable nodeIntegration and disable contextIsolation is not secure in production\n      // Consider using contextBridge.exposeInMainWorld\n      // Read more on https://www.electronjs.org/docs/latest/tutorial/context-isolation\n      nodeIntegration: false,\n      contextIsolation: true,\n    },\n  })\n\n  if (process.env.VITE_DEV_SERVER_URL) {\n    win.loadURL(url)\n  } else {\n    win.loadFile(indexHtml)\n  }\n\n  // Make all links open with the browser, not with the application\n  win.webContents.setWindowOpenHandler(({ url }) => {\n    if (url.startsWith('https:')) shell.openExternal(url)\n    return { action: 'deny' }\n  })\n}\n\napp.whenReady().then(createWindow)\n\napp.on('window-all-closed', () => {\n  win = null\n  if (process.platform !== 'darwin') app.quit()\n})\n\napp.on('second-instance', () => {\n  if (win) {\n    // Focus on the main window if the user tried to open another\n    if (win.isMinimized()) win.restore()\n    win.focus()\n  }\n})\n\napp.on('activate', () => {\n  const allWindows = BrowserWindow.getAllWindows()\n  if (allWindows.length) {\n    allWindows[0].focus()\n  } else {\n    createWindow()\n  }\n})\n\nipcMain.handle(\"selectFile\", selectFile);\nipcMain.handle(\"getCache\", getCache);\n\nasync function selectFile(): Promise<Array<Channel>> {\n  let dialogResult = await dialog.showOpenDialog({ properties: ['openFile'] });\n  if (dialogResult.canceled) return;\n  let channels = await parsePlaylist(dialogResult.filePaths[0]);\n  SaveToCache(channels);\n  return channels;\n}\n\nasync function getCache(): Promise<Array<Channel>> {\n  let cachePath = `${getHomeDirectory()}/cache.json`;\n  if (!existsSync(cachePath)) \n    return [];\n  let json = await readFile(cachePath, {encoding: \"utf-8\"});\n  return JSON.parse(json);\n}\n\nasync function SaveToCache(channels: Array<Channel>) {\n  let json = JSON.stringify(channels);\n  let path = getHomeDirectory();\n  let cachePath = `${path}/cache.json`\n  if(!existsSync(path))\n    mkdir(path, {recursive: true});\n  await writeFile(cachePath, json);\n}\n\nfunction getHomeDirectory(){\n  let appdataPath = process.env.APPDATA || \n  (process.platform == 'darwin' ? process.env.HOME + '/Library/Preferences' : \n  process.env.HOME + \"/.local/share\")\n  return `${appdataPath}/open-tv`;\n}\n\nasync function parsePlaylist(filePath: string) {\n  const nameRegExp = /tvg-name=\"{1}(?<name>[^\"]*)\"{1}/;\n  const logoRegExp = /tvg-logo=\"{1}(?<logo>[^\"]*)\"{1}/;  \n  const groupRegExp = /group-title=\"{1}(?<group>[^\"]*)\"{1}/;\n\n  const inputStream = createReadStream(filePath);\n  var lineReader = readLine.createInterface({\n    input: inputStream,\n    terminal: false,\n  });\n  let skippedFirstLine = false;\n  let twoLines: Array<string> = [];\n  let channels: Array<Channel> = [];\n  for await (const line of lineReader) {\n    if(!skippedFirstLine) {\n      skippedFirstLine = true;\n      continue;\n    }\n    twoLines.push(line);\n    if (twoLines.length === 2) {\n        let firstLine = twoLines[0];\n        let secondLine = twoLines[1];\n        channels.push({\n          name: firstLine.match(nameRegExp)[0],\n          image: firstLine.match(logoRegExp)[0],\n          group: firstLine.match(groupRegExp)[0],\n          url: secondLine\n        });\n        twoLines = [];\n    }\n  }\n  return channels;\n}"],"names":["join","release","app","BrowserWindow","url","shell","ipcMain","dialog","existsSync","readFile","mkdir","writeFile","createReadStream","readLine"],"mappings":"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"}